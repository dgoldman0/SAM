import globals
import asyncio
import websockets

# Engage in active conversation with user.
async def converse(websocket):
    lock = globals.lock
    print("New Connection")
    # Get user information.
    user = await users.authenticate_user(user_input, websocket)

    if user is None:
        # Boot user and close connection.
        print("User Unable to Validate")
        websocket.close()
        return

    # Handle incoming messages
    async for user_input in websocket:
        # User will only "notice" and respond to the current active user (the person they're paying attention to), and the response will instead be generated by the subconscious.
        lock.acquire()
        response = thoughts.respond_to_user(user[username], user_input).strip()
        websocket.send(("Sam: " + response).encode())
        lock.release()

# Listen for incoming connections
async def _listen(stop):
    async with websockets.serve(converse, "localhost", 9381):
        await stop  # run until dreaming

async def listen():
    global stop
    print("Listening for incoming connections.")
    loop = asyncio.get_event_loop()
    stop = loop.create_future()
    loop.run_until_complete(_listen(stop))

async def stop_listening(reason):
    stop.set_result(reason)
